import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions.col
import org.apache.spark.sql.types._

object Assignment9 extends App {

  val spark=SparkSession.builder().master("local").appName("Assignment9").getOrCreate()
  val sc=spark.sparkContext
  sc.setLogLevel("error")

  val schema=StructType(Array(StructField("sale_id",IntegerType,true),
    StructField("customer_name", StringType, true),
    StructField("sale_date", DateType, true),
    StructField("total_amount", DoubleType, true),
    StructField("city", StringType, true),
    StructField("payment_status", StringType, true)
  ))

  val df = spark.read.option("header", "true").schema(schema).csv("C:\\Users\\Admin\\tdi_java_sessions\\spark_tdi1\\InputFiles\\sales.csv")

  df.printSchema()
  df.show()

  //1. Select the sale_id and customer_name for all sales that were paid.
  df.filter(col("payment_status")==="Paid").select(col("sale_id"),col("customer_name")).show()

  //2. Select the customer_name, sale_date, and total_amount for sales greater than 200.
  df.filter(col("total_amount")>200).select(col("customer_name"),col("sale_date"),col("total_amount")).show()

  //3. Select all columns for sales that occurred on '2024-11-25'.
  df.filter(col("sale_date")==="2024-11-25").show()

  //4. Select the customer_name, sale_date, and payment_status for sales where the payment_status is 'Paid'.
  df.filter(col("payment_status")==="Paid").select(col("customer_name"),col("sale_date"),col("payment_status")).show()

  //5. Select the customer_name and city for customers who made purchases in 'Pune'.
  df.filter(col("city")==="Pune").select(col("customer_name"),col("city")).show()

  //6. Select the customer_name and total_amount for sales with a total amount between 100 and 300.
  df.filter(col("total_amount").between(100,300)).select(col("customer_name"),col("total_amount")).show()

  //7. Select all columns for sales with a total_amount less than 150.
  df.filter(col("total_amount")<150).show()

  //8. Select distinct payment_status from the sales table.
  df.select(col("payment_status")).distinct().show()

  //9. Select the customer_name, sale_date, and payment_status for sales where the customerâ€™s name starts with 'S'.
  df.filter(col("customer_name").startsWith("S")).select(col("customer_name"),col("sale_date"),col("payment_status")).show()

  //10. Select the customer_name, sale_date, and city where the city is either 'Mumbai' or 'Nagpur'.
  df.filter(col("city")==="Mumbai" || col("city")==="Nagpur").select(col("customer_name"),col("sale_date"),col("city")).show()

  //11. Select the customer_name and total_amount for sales where the total_amount is greater than 100 and payment_status is 'Paid'.
  df.filter(col("total_amount")>100 && col("payment_status")==="Paid").select(col("customer_name"),col("total_amount")).show()

  //12. Select all columns from the sales table for sales where the total_amount is less than 200 and the payment_status is 'Pending'.
  df.filter(col("total_amount")<200 && col("payment_status")==="Pending").show()

  //13. Select the customer_name and sale_date for sales that took place before '2024-11-20'.
  df.filter(col("sale_date")<"2024-11-20").select(col("customer_name"),col("sale_date")).show()

  //14. Select the customer_name, sale_date, and payment_status for sales where the payment_status is not 'Pending'.
  df.filter(col("payment_status")=!="Pending").select(col("customer_name"),col("sale_date"),col("payment_status")).show()

  //15. Select the customer_name and city for customers from 'Mumbai' with a total amount greater than 100.
  df.filter(col("city")==="Mumbai" && col("total_amount")>100).select(col("customer_name"),col("city")).show()

  //16. Select all columns for sales where the sale_date is between '2024-11-18' and '2024-11-25'.
  df.filter(col("sale_date").between("2024-11-18","2024-11-25")).show()

  //17. Select the customer_name and total_amount for sales that were made in the city 'Pune' and have a total amount less than 500.
  df.filter(col("city")==="Pune" && col("total_amount")<500).select(col("customer_name"),col("total_amount")).show()

  //18. Select the customer_name and sale_date for sales that occurred on or after '2024-11-19'.
  df.filter(col("sale_date")>="2024-11-19").select(col("customer_name"),col("sale_date")).show()

  //19. Select the customer_name and total_amount where the total_amount is greater than 100 and less than 500.
  df.filter(col("total_amount")>100 && col("total_amount")<500).select(col("customer_name"),col("total_amount")).show()

  //20. Select the customer_name and payment_status for sales where the payment_status is 'Pending' and the city is 'Nagpur'.
  df.filter(col("payment_status")==="Pending" && col("city")==="Nagpur").select(col("customer_name"),col("payment_status")).show()

  //21. Select the customer_name, sale_date, and total_amount for sales made in 'Mumbai' and with a total amount greater than 150.
  df.filter(col("city")==="Mumbai" && col("total_amount")>150).select(col("customer_name"),col("sale_date"),col("total_amount")).show()

  //22. Select all columns for sales where the sale_date is '2024-11-20' and payment_status is 'Paid'.
  df.filter(col("sale_date")==="2024-11-20" && col("payment_status")==="Paid").show()

  //23. Select the customer_name and city for customers from 'Pune' where the payment_status is 'Pending'.
  df.filter(col("city")==="Pune" && col("payment_status")==="Pending").select(col("customer_name"),col("city")).show()

  //24. Select the customer_name and total_amount for sales that are either in 'Pune' or 'Nagpur' with a total amount greater than 300.
  df.filter(col("city")==="Pune" || col("city")==="Nagpur" && col("total_amount")>300).select(col("customer_name"),col("total_amount")).show()

  //25. Select the customer_name, sale_date, and total_amount for sales where the sale_date is before '2024-11-22'.
  df.filter(col("sale_date")<"2024-11-12").select(col("customer_name"),col("sale_date"),col("total_amount")).show()

  //26. Select all columns for sales where the payment_status is 'Paid' and the city is 'Mumbai'.
  df.filter(col("payment_status")==="Paid" && col("city")==="Mumbai").show()

  //27. Select the customer_name and payment_status for sales where the payment_status is 'Pending' and the total_amount is greater than 200.
  df.filter(col("payment_status")==="Pending" && col("total_amount")>200).select(col("customer_name"),col("payment_status")).show()

  //28. Select the customer_name, sale_date, and total_amount for sales that are from 'Nagpur' and have a total amount less than 150.
  df.filter(col("city")==="Nagpur" && col("total_amount")<150).select(col("customer_name"),col("sale_date"),col("total_amount")).show()

  //29. Select the customer_name and sale_date for sales where the sale_date is on or after '2024-11-18'.
  df.filter(col("sale_date")>="2024-11-18").select(col("customer_name"),col("sale_date")).show()

  //30. Select the customer_name and total_amount where the total_amount is greater than 150 and the city is 'Mumbai'.
  df.filter(col("total_amount")>150 && col("city")==="Mumbai").select(col("customer_name"),col("total_amount")).show()

  //31. Select the customer_name and total_amount for sales where the payment_status is 'Paid' and sale_date is after '2024-11-19'.
  df.filter(col("payment_status")==="Paid" && col("sale_date")>"2024-11-19").select(col("customer_name"),col("total_amount")).show()

  //32. Select the customer_name and sale_date for sales where the total_amount is between 50 and 150 and the payment_status is 'Pending'.
  df.filter(col("total_amount").between(50,150) && col("payment_status")==="Pending").select(col("customer_name"),col("sale_date")).show()

  //33. Select the customer_name, sale_date, and payment_status for sales where the payment_status is 'Paid' and the sale_date is between '2024-11-20' and '2024-11-25'.
  df.filter(col("payment_status")==="Paid" && col("sale_date").between("2024-11-20","2024-11-25")).select(col("customer_name"),col("sale_date"),col("payment_status")).show()

  //34. Select the customer_name and city where the city is 'Mumbai' or 'Nagpur' and the payment_status is 'Pending'.
  df.filter(col("city")==="Mumbai" || col("city")==="Nagpur" && col("payment_status")==="Pending").select(col("customer_name"),col("city")).show()

  //35. Select the customer_name and sale_date where the sale_date is between '2024-11-18' and '2024-11-25' and the total_amount is greater than 100.
  df.filter(col("sale_date").between("2024-11-18","2024-11-25") && col("total_amount")>100).select(col("customer_name"),col("sale_date")).show()

  //36. Select the customer_name and total_amount for sales where the total_amount is between 200 and 500 and the payment_status is 'Paid'.
  df.filter(col("total_amount").between(200,500) && col("payment_status")==="Paid").select(col("customer_name"),col("total_amount")).show()

  //37. Select the customer_name and payment_status for sales where the payment_status is 'Pending' and the city is 'Nagpur'.
  df.filter(col("payment_status")==="Pending" && col("city")==="Nagpur").select(col("customer_name"),col("payment_status")).show()

  //38. Select the customer_name, sale_date, and payment_status for sales where the sale_date is before '2024-11-20' and the payment_status is 'Paid'.
  df.filter(col("sale_date")<"2024-11-20" && col("payment_status")==="Paid").select(col("customer_name"),col("sale_date"),col("payment_status")).show()

  //39. Select all columns for sales where the total_amount is greater than 100 but less than 500 and payment_status is 'Paid'.
  df.filter(col("total_amount")>100 && col("total_amount")<500 && col("payment_status")==="Paid").show()

  //40. Select the customer_name, sale_date, and city for sales made in 'Mumbai' and 'Pune'.
  df.filter(col("city").isin("Mumbai", "Pune")).select("customer_name", "sale_date", "city").show()

  //41. Select the customer_name, sale_date, and total_amount for sales where the total_amount is greater than 100 and the city is 'Nagpur'.
  df.filter(col("total_amount")>100 && col("city")==="Nagpur").select(col("customer_name"),col("sale_date"),col("total_amount")).show()

  //42. Select the customer_name, total_amount, and payment_status where the payment_status is 'Paid' and city is 'Pune'.
  df.filter(col("payment_status")==="Paid" && col("city")==="Pune").select(col("customer_name"),col("total_amount"),col("payment_status")).show()

  //43. Select all columns for sales made before '2024-11-20' with a payment_status of 'Paid'.
  df.filter(col("sale_date")<"2024-11-20" && col("payment_status")==="Paid").show()

  //44. Select the customer_name and sale_date where the sale_date is after '2024-11-19' and the total_amount is less than 500.
  df.filter(col("sale_date")>"2024-11-19" && col("total_amount")<500).select(col("customer_name"),col("sale_date")).show()

  //45. Select the customer_name and city for sales where the city is either 'Pune' or 'Mumbai'.
  df.filter(col("city").isin("Pune","Mumbai")).select(col("customer_name"),col("city")).show()

  //46. Select the customer_name and total_amount for sales made in 'Nagpur' with a total_amount less than 100.
  df.filter(col("city") === "Nagpur" && col("total_amount") < 100).select("customer_name", "total_amount").show()

  //47. Select the customer_name and sale_date for sales where the sale_date is before '2024-11-21' and the payment_status is 'Paid'.
  df.filter(col("sale_date") < "2024-11-21" && col("payment_status") === "Paid").select("customer_name", "sale_date").show()

  //48. Select the customer_name, total_amount, and city for sales where the city is 'Pune' and the payment_status is 'Pending'.
  df.filter(col("city") === "Pune" && col("payment_status") === "Pending").select("customer_name", "total_amount", "city").show()

  //49. Select the customer_name and payment_status for sales where the payment_status is 'Paid' and the total_amount is greater than 150.
  df.filter(col("payment_status") === "Paid" && col("total_amount") > 150).select("customer_name", "payment_status").show()

  //50. Select the customer_name, total_amount, and payment_status for sales made on or after '2024-11-19' and with a total_amount less than 500.
  df.filter(col("sale_date") >= "2024-11-19" && col("total_amount") < 500).select("customer_name", "total_amount", "payment_status").show()
}
